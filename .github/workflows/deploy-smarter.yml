name: deploy-smarterasp
on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      # Self-contained (no host runtime dependency)
      - name: Publish (self-contained win-x64)
        run: dotnet publish src/ScottMo.Web/ScottMo.Web.csproj -c Release -o publish -r win-x64 --self-contained true /p:PublishReadyToRun=true

      - name: Ensure stdout log folder exists
        shell: pwsh
        run: New-Item -ItemType Directory -Path "publish/logs" -Force | Out-Null

      - name: Inject connection string into web.config
        shell: pwsh
        run: |
          $web = "publish/web.config"
          [xml]$x = Get-Content $web
          $ancm = $x.configuration.'system.webServer'.aspNetCore
          if (-not $ancm) { throw "aspNetCore element not found in web.config" }
          $envs = $ancm.environmentVariables
          if (-not $envs) { $envs = $x.CreateElement("environmentVariables"); $ancm.AppendChild($envs) | Out-Null }
          foreach ($n in @($envs.environmentVariable)) { if ($n.name -eq "Default__ConnectionString") { $envs.RemoveChild($n) | Out-Null } }
          $e = $x.CreateElement("environmentVariable")
          $e.SetAttribute("name","Default__ConnectionString")
          $e.SetAttribute("value","${{ secrets.SASP_DB_CONNSTR }}")
          $envs.AppendChild($e) | Out-Null
          $x.Save($web)

      - name: Add deploy marker
        shell: pwsh
        run: |
          $sha = "${{ github.sha }}".Substring(0,7)
          Set-Content -Path "publish/version.txt" -Value "deployed $((Get-Date).ToString('u')) / $sha"

      # --- Phase 1: take site offline to release file locks ---
      - name: Create app_offline stub
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Path "offline" -Force | Out-Null
          @'
<!doctype html><meta charset="utf-8">
<title>Updatingâ€¦</title>
<style>body{font-family:system-ui;margin:4rem}</style>
<h1>ScottMo.dev is updating</h1><p>Back in a moment.</p>
'@ | Set-Content -Path "offline/app_offline.htm" -Encoding UTF8

      - name: Upload app_offline.htm (stop the app)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        with:
          server: ${{ secrets.SASP_FTPS_SERVER }}
          username: ${{ secrets.SASP_FTPS_USER }}
          password: ${{ secrets.SASP_FTPS_PASSWORD }}
          protocol: ftps
          port: 21
          local-dir: offline/
          server-dir: ${{ secrets.SASP_SERVER_DIR }}
          log-level: verbose
          state-name: .ftp-deploy-sync-offline.json

      - name: Wait for IIS to unload the app
        shell: pwsh
        run: Start-Sleep -Seconds 5

      # --- Phase 2: deploy the site while it's offline ---
      - name: FTP Deploy site
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        with:
          server: ${{ secrets.SASP_FTPS_SERVER }}
          username: ${{ secrets.SASP_FTPS_USER }}
          password: ${{ secrets.SASP_FTPS_PASSWORD }}
          protocol: ftps
          port: 21
          local-dir: publish/
          server-dir: ${{ secrets.SASP_SERVER_DIR }}
          log-level: verbose
          state-name: .ftp-deploy-sync-state.json

      # --- Phase 3: remove app_offline.htm and clean extras (preserve Downloads if present) ---
      - name: Bring site back online (remove app_offline.htm)
        uses: SamKirkland/FTP-Deploy-Action@v4.3.6
        with:
          server: ${{ secrets.SASP_FTPS_SERVER }}
          username: ${{ secrets.SASP_FTPS_USER }}
          password: ${{ secrets.SASP_FTPS_PASSWORD }}
          protocol: ftps
          port: 21
          local-dir: publish/
          server-dir: ${{ secrets.SASP_SERVER_DIR }}
          dangerous-clean-slate: true
          exclude: |
            Downloads/**
            **/Downloads/**
          log-level: verbose
          state-name: .ftp-deploy-sync-clean.json
